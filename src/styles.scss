:root {
  --scenePerspective: 1;
  --scenePerspectiveOriginX: 50;
  --scenePerspectiveOriginY: 30;
  --itemZ: 1; // Gap between each cards
  --cameraSpeed: 100; // Where 1 is the fastest, this var is a multiplying factor of --scenePerspective and --filmZ
  --cameraZ: 500; // Initial camera position 
  --viewportHeight: 0; // Viewport height will allow us to set the depth of our scene 
 }

 .viewport {
   height: calc(var(--viewportHeight) * 1px);
 }

.scene3D-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  perspective: calc(var(--scenePerspective) * var(--cameraSpeed) * 1px);
  perspective-origin: calc(var(--scenePerspectiveOriginX) * 1%) calc( var(--scenePerspectiveOriginY) * 1% );
  will-change: perspective-origin;
  transform: translate3d( 0, 0, 0 ); //Allows Hardware-Accelerated CSS, so transitions are smoother 
 }

 .scene3D { 
  position: absolute; top: 0;
  height: 100vh;
  width: 100%;
  transform-style: preserve-3d;
  transform: translateZ(calc(var(--cameraZ) * 1px));
  will-change: transform; 


  .item { 
    position: absolute; 
    top: 40%; 
    backface-visibility: hidden;

    border: 200px black;
    background: gray;
    opacity: .98;
    width: 100px;
    height: 200px;
    display: flex;
    justify-content: center;
    transition: all 0.5s ease-in-out;
    will-change: transform;

    &:nth-child(2n) { left: 0; } 
    &:nth-child(2n + 1) { right: 0; } 
    @for $i from 0 through 25 {
      $odd: $i % 2;
      $xDist: random(50) - 25 * 1%; 
      $yDist: random(100) - 50 * 1%;
      $zDist: calc(var(--itemZ) * var(--cameraSpeed) * #{$i} * -1px); 
      
        &:nth-child(#{$i}) {
          $transformValue: translate3D( 
              $xDist,
              $yDist,
              $zDist
            )
            rotateY(
              calc(45deg * #{if( $odd == 0, 1, -1 )})
          ); 
          transform: $transformValue;
    
        }

        &.rotated-#{$i} {
          $xDist: if( $odd == 0, 12% , -10% );
          $yDist: if( $odd == 0, -30% , -30% );
          $zDist: calc(var(--itemZ) * var(--cameraSpeed) * #{$i} * -1px);

          $rotateValue: translate3D( 
              $xDist,
              $yDist,
              $zDist
            )
            rotateY(
              0
          ); 

          transform: $rotateValue;
          width: 80vw;
          height: 80vh
        }
      }


   } 
 }

